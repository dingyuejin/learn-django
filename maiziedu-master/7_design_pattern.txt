'''
结合视频的讲解（也可通过网上查阅资料）请写出你对单例模式,工厂模式，装饰模式的理解
'''
1.单例模式
首先先要理解单例模式存在的必要性，那就是在某些情况下，有些对象，我们只需要一个就可以了，比如，一台计算机上可以连好几个打印机，但是这个计算机上的打印程序只能有一个，这里就可以通过单例模式来避免两个打印作业同时输出到打印机中，即在整个的打印过程中我只有一个打印程序的实例。
简单说来，单例模式（也叫单件模式）的作用就是保证在整个应用程序的生命周期中，
任何一个时刻，单例类的实例都只存在一个（当然也可以不存在）。
单例模式保证一个类仅有一个实例，同时这个类还必须提供一个访问该类的全局访问点。

2.工厂模式
还是从工厂模式的存在意义说起，面向对象中对实例的初始化工作如果是很长一段代码，说明要做的工作很多，将很多工作装入一个方法中，相当于将很多鸡蛋放在一个篮子里，是很危险的，这也是有悖于面向对象的原则，面向对象的封装(Encapsulation)和分派(Delegation)告诉我们，尽量将长的代码分派“切割”成每段，将每段再“封装”起来(减少段和段之间耦合联系性)，这样，就会将风险分散，以后如果需要修改，只要更改每段，不会再发生牵一动百的事情。
所以工厂模式的意义就在于将创建实例的工作与使用实例的工作分开, 也就是说，让创建实例所需要的大量初始化工作从类的构造函数中分离出去。

3.装饰模式
装饰模式主要适用于以下情况：
a. 需要扩展一个类的功能，或给一个类添加附加职责。
b. 需要动态的给一个对象添加功能，这些功能可以再动态的撤销。
c. 需要增加由一些基本功能的排列组合而产生的非常大量的功能，从而使继承关系变的不现实。
d. 当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。
